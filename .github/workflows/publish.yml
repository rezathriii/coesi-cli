name: Publish to PyPI

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  packages: write

jobs:
  check-version-commit:
    runs-on: ubuntu-latest
    outputs:
      should-publish: ${{ steps.check.outputs.should-publish }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Check commit message
        id: check
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MSG"
          
          if [[ "$COMMIT_MSG" =~ ^NEW\ VERSION:\ ([0-9]+\.[0-9]+\.[0-9]+.*) ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "should-publish=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "✅ Found version trigger: $VERSION"
          else
            echo "should-publish=false" >> $GITHUB_OUTPUT
            echo "❌ No version trigger found in commit message"
          fi

  test:
    needs: check-version-commit
    if: needs.check-version-commit.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: Run tests
      run: |
        pytest
        
    - name: Check code quality
      run: |
        black --check src/ tests/
        flake8 src/ tests/ --max-line-length=88
        mypy src/

  publish:
    needs: [check-version-commit, test]
    if: needs.check-version-commit.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Update version in pyproject.toml
      run: |
        VERSION="${{ needs.check-version-commit.outputs.version }}"
        echo "Updating version to: $VERSION"
        
        # Use sed to update version in pyproject.toml
        sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
        
        # Verify the change
        grep "^version = " pyproject.toml
        
    - name: Commit version update
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add pyproject.toml
        git commit -m "Auto-update version to ${{ needs.check-version-commit.outputs.version }}" || exit 0
        git push
        
    - name: Build package
      run: |
        python -m build
        
    - name: Publish to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TESTPYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*
        
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.check-version-commit.outputs.version }}
        name: Release v${{ needs.check-version-commit.outputs.version }}
        body: |
          ## Changes in v${{ needs.check-version-commit.outputs.version }}
          
          Released via GitHub Actions from commit: ${{ github.sha }}
          
          ### Installation
          ```bash
          pip install coesi==${{ needs.check-version-commit.outputs.version }}
          ```
          
          ### Usage
          ```bash
          coesi --help
          ```
        draft: false
        prerelease: false
